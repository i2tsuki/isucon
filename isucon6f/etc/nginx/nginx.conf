user www-data;
# nginx の負荷が増えるようならプロセス増やす
worker_processes  2;
worker_rlimit_nofile 8192;

error_log stderr notice;

pid /var/run/nginx.pid;

events {
    worker_connections 6144;
    multi_accept on;
    use epoll;
}

http {
    # proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=cache-space:4m max_size=50m inactive=120m;
    # proxy_temp_path /var/tmp/nginx;

    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    # $cookie を末尾に入れてリクエストにセッション情報があるかどうか分けるお!

    # ログ解析に使う部分は LTSV ぽくしよう
    log_format isucon '$time_local $msec\t$status\treqtime:$request_time\t'
                      'in:$request_length\tout:$bytes_sent\trequest:$request\t'
                      'acceptencoding:$http_accept_encoding\treferer:$http_referer\t'
                      'ua:$http_user_agent';

    # 最終計測時は access_log off; で性能稼げる
    # access_log /var/log/nginx/access.log  isucon;
    access_log off;

    sendfile on;
    tcp_nopush on;

    keepalive_timeout 10s;

    # 静的ファイルは圧縮する
    # プロキシしてるデータは毎回圧縮するとCPU食うので圧縮しない
    gzip_proxied off;

    upstream isucon {
        server 127.0.0.1:8080;
        # 頻繁にアプリサーバーへの再接続をして TIME_WAIT で死ぬのを防ぐ
        keepalive 2000;
    }

    upstream react {
        server 127.0.0.1:8000;
        keepalive 200;
    }

    # server {
    #     listen       80;

    #     # 静的ファイルがある場所を指定
    #     root /home/isucon;

    #     # 静的ファイルを正規表現でマッチさせて nginx に返させる

    #     # ウェブブラウザでアクセスした時のディレクトリ、ファイル一覧を表示したい場合は、以下のように設定します。
    #     # autoindex on;

    #     location ~ /webdav/(.*) {
    #         proxy_request_buffering off;
    #         client_body_temp_path /var/nginx/webdav 1 2;
    #         # 基本WebDAVモジュールで許可するメソッドを指定する
    #         dav_methods PUT DELETE MKCOL COPY MOVE;
    #         # 拡張WebDAVモジュールで許可するメソッドを指定する
    #         dav_ext_methods PROPFIND OPTIONS;

    #         dav_access user:rw group:rw all:r;
    #         create_full_put_path on;
    #     }

    #     location ~ (.*) {
    #         proxy_pass http://isucon;
    #         # デフォルトで HTTP ヘッダは転送されるけど、 Host は明示的に指定しないと転送されない
    #         proxy_set_header Host $host;
    #     }
    # }

    server {
        listen 443 ssl http2;

        ssl on;
        ssl_protocols TLSv1.2;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets on;

        http2_max_concurrent_streams 128;
        http2_recv_timeout 30s;

        ssl_certificate /home/isucon/webapp/ssl/oreore.crt;
        ssl_certificate_key /home/isucon/webapp/ssl/oreore.key;

        add_header Alternate-Protocol 443:npn-spdy/3;

        location ~ .*\.(css|js|ico)$ {
            gzip_static on;
            expires max; # expires 30d;
            add_header Pragma public;
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
            etag off;
            root /home/isucon/webapp/react/public;
        }

        location ~ /api {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_pass http://isucon;
            proxy_buffering off;
        }

        location ~ / {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_pass http://react;
            # デフォルトで HTTP ヘッダは転送されるけど、 Host は明示的に指定しないと転送されない
        }
    }
}
